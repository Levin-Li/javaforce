package jpbx.core;

/**
 * MainGUI startup
 *
 * @author pquiring
 *
 * Created : Jun 26, 2014
 */

import java.awt.event.*;
import java.awt.*;

import javaforce.*;

public class MainGUI extends javax.swing.JFrame implements ActionListener {
  /**
   * Creates new form MainGUI
   */
  public MainGUI() {
    This = this;
    initComponents();
    setPosition();
    JFImage appicon = new JFImage();
    appicon.loadPNG(this.getClass().getClassLoader().getResourceAsStream("jpbxlite.png"));
    setIconImage(appicon.getImage());
    appicon.loadPNG(this.getClass().getClassLoader().getResourceAsStream("jpbxlite_tray.png"));
    tray = SystemTray.getSystemTray();
    //tray icon must be scaled
    Dimension size = tray.getTrayIconSize();
    JFImage scaled = new JFImage(size.width, size.height);
    scaled.fill(0, 0, size.width, size.height, 0x00000000, true);  //fill with alpha transparent
    if (false) {
      //scaled image (looks bad sometimes)
      scaled.getGraphics().drawImage(appicon.getImage()
        , 0, 0, size.width, size.height
        , 0, 0, appicon.getWidth(), appicon.getHeight()
        , null);
    } else {
      //center image
      scaled.getGraphics().drawImage(appicon.getImage()
        , (size.width - appicon.getWidth()) / 2
        , (size.height - appicon.getHeight()) / 2
        , null);
    }
    //create tray icon
    PopupMenu popup = new PopupMenu();
    show = new MenuItem("Show");
    show.addActionListener(this);
    popup.add(show);
    popup.addSeparator();
    exit = new MenuItem("Exit");
    exit.addActionListener(this);
    popup.add(exit);
    icon = new TrayIcon(scaled.getImage(), "jPBXlite", popup);
    icon.addActionListener(this);
    try { tray.add(icon); } catch (Exception e) { JFLog.log(e); }
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jScrollPane1 = new javax.swing.JScrollPane();
    log = new javax.swing.JTextArea();

    setTitle("jPBXLite");

    log.setEditable(false);
    log.setColumns(20);
    log.setRows(5);
    jScrollPane1.setViewportView(log);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new MainGUI().setVisible(true);
      }
    });
    MainCLI.main(args);
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JTextArea log;
  // End of variables declaration//GEN-END:variables

  private static MainGUI This;

  public static void addLog(String str) {
    if (This == null) return;
    final String _str = str;
    java.awt.EventQueue.invokeLater(new Runnable() {public void run() {
      This.log.setText(This.log.getText() + _str + "\n");
    }});
  }

  private void setPosition() {
    Dimension d = getSize();
    Rectangle s = GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds();
    if ((d.width > s.width) || (d.height > s.height)) {
      if (d.width > s.width) d.width = s.width;
      if (d.height > s.height) d.height = s.height;
      setSize(d);
    }
    setLocation(s.width/2 - d.width/2, s.height/2 - d.height/2);
  }

  public void actionPerformed(ActionEvent e) {
    Object o = e.getSource();
    if (o == exit) {
      System.exit(0);
    }
    if (o == show) {
      if (isVisible()) {
        if ((getExtendedState() & Frame.ICONIFIED) == Frame.ICONIFIED) {
          setExtendedState(getExtendedState() ^ Frame.ICONIFIED);
        }
        requestFocus();
      } else {
        setVisible(true);
      }
    }
  }

  public SystemTray tray;
  public TrayIcon icon;
  public MenuItem exit, show;
}
